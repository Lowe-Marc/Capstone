@{
    ViewBag.Title = "Home Page";
}

<body>

    @{
        if (ViewData["ConfigurationException"] != null && !ViewData["ConfigurationException"].Equals(""))
        {
            <script>
                alert("An exception was thrown parsing the configuration file. Please see the /Home/Debug endpoint for a stacktrace.")
            </script>
        }

        List<Capstone.Models.ConfigurationHelper.CytoscapeConfig> AStarConfigs = (List<Capstone.Models.ConfigurationHelper.CytoscapeConfig>)ViewData["Configs"];
    }

    <div id="cy"></div>
    <script>
        $(function () { // on dom ready

            var configs = @Html.Raw(Json.Encode(AStarConfigs));
            var possibleCytoscapeMaps = [];
            for (var i = 0; i < configs.length; i++) {
                possibleCytoscapeMaps.push({
                    map: null,
                    current: false
                });
            }
            var currentConfig = configs[0];
            var currentAnimation = {
                timestep: 0,
                frames: [],
                paused: false,
                finished: false
            };
            var animationResults = [];
            var currentTimestep = 0;
            var DONTPAUSE = -1;

            // Set page description
            $('#simulation-title').text("A* Search");
            $('#simulation-description').text("An intelligent path finding algorithm.");
            $('#simulation-header').show();
            // Cytoscape
            var cy = setCytoscape(currentConfig);
            setConfigurationsInSelector(configs, possibleCytoscapeMaps);
            possibleCytoscapeMaps[0]['current'] = true;
            possibleCytoscapeMaps[0]['map'] = cy;
            

            //Start a simulation
            $('#play').click(function () {
                if ($('#play').hasClass('disabled')) {
                    return;
                }
                currentAnimation['paused'] = false;
                $('#play').addClass('disabled');
                $('#forward').addClass('disabled');
                $('#backward').addClass('disabled');
                $('#pause').removeClass('disabled');

                cy = getCurrentMapObject(possibleCytoscapeMaps);

                //Only run the simulation if it hasn't already been run on this configuration
                if (currentAnimation['frames'].length == 0) {
                    runSimulation(firstPlay)
                } else {
                    resetFrame(currentAnimation['frames'][currentTimestep], restartAnim)                }
            });

            $('#pause').click(function () {
                if ($('#pause').hasClass('disabled')) {
                    return;
                }
                currentTimestep = currentAnimation['timestep'];
                pauseFrame(currentAnimation['frames'][currentTimestep]);
                currentAnimation['paused'] = true;
                $('#play').removeClass('disabled');
                $('#forward').removeClass('disabled');
                $('#backward').removeClass('disabled');
                $('#pause').addClass('disabled');
            });

            // Need to run the simulation before advancing a frame if it has not already run
            $('#forward').click(function () {
                if (animationResults.length == 0) {
                    runSimulation(frameForward);
                } else {
                    frameForward();
                }
            });

            function frameForward() {
                resetFrame(currentAnimation['frames'][currentTimestep], startNextFrame)
            }

            function startNextFrame() {
                currentTimestep++;
                currentAnimation = {
                    timestep: currentTimestep,
                    frames: [],
                    paused: false,
                    finished: false
                };
                assembleFullAnimation(animationResults, cy, currentAnimation, currentTimestep);
                playFrame(currentAnimation['frames'][currentTimestep], currentTimestep, currentAnimation['frames'].length);
            }

            function restartAnim() {
                currentAnimation = {
                    timestep: currentTimestep,
                    frames: [],
                    paused: false,
                    finished: false
                };
                currentTimestep = 0;
                assembleFullAnimation(animationResults, cy, currentAnimation, DONTPAUSE);
                playFrame(currentAnimation['frames'][currentTimestep], currentTimestep, currentAnimation['frames'].length);
            }

            function runSimulation(executeOnSuccess) {
                $.ajax({
                    method: "GET",
                    url: "/Simulations/AStar",
                    success: (result) => {
                        console.log("Successful ajax request");
                        animationResults = $.parseJSON(result);
                        if (executeOnSuccess != null) {
                            executeOnSuccess();
                        }
                    },
                    error: (result) => {
                        console.log("Unsuccessful ajax request");
                        console.log(result);
                    }
                });
            }

            function firstPlay() {
                assembleFullAnimation(animationResults, cy, currentAnimation, DONTPAUSE);
                playFrame(currentAnimation['frames'][currentTimestep], currentTimestep, currentAnimation['frames'].length);
            }

        });
    </script>
</body>