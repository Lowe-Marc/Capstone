@{
    ViewBag.Title = "Home Page";
}

<body>

    @{
        if (ViewData["ConfigurationException"] != null && !ViewData["ConfigurationException"].Equals(""))
        {
            <script>
                alert("An exception was thrown parsing the configuration file. Please see the /Home/Debug endpoint for a stacktrace.")
            </script>
        }

        List<Capstone.Models.ConfigurationHelper.CytoscapeConfig> AStarConfigs = (List<Capstone.Models.ConfigurationHelper.CytoscapeConfig>)ViewData["Configs"];
    }

    <div id="cy"></div>
    <script>
        $(function () { // on dom ready

            // Set page description
            $('#simulation-title').text("A* Search")
            $('#simulation-description').text("An intelligent path finding algorithm.")
            $('#simulation-header').show();

            // Cytoscape

            var configs = @Html.Raw(Json.Encode(AStarConfigs));
            console.log(configs);
            var first = configs[0];
            var elements = [];
            var positionsArr = [];

            buildElementStructure();

            // TODO: positions
            // find the center point and offset all the points so the center is at 0,0
            var cy = cytoscape({
                container: document.getElementById('cy'),
                style: [
                    {
                        selector: 'node',
                        style: {
                            shape: 'hexagon',
                            'background-color': 'red',
                            label: 'data(id)'
                        }
                    }],
                layout: {
                    name: 'preset'
                },
                elements: elements,
                zoom: 1,
                pan: { x: 0, y: 0 },
                minZoom: 1e-1,
                maxZoom: 1,
                wheelSensitivity: 0.2
            });

            cy.ready(function () {
                cy.nodes().positions(function (ele, i) {
                    return {
                        x: positionsArr[i].x,
                        y: positionsArr[i].y
                    }
                });
            });


            cy.on('tap', 'node', function (evt) {
                var node = evt.target;
                console.log("tap", node.id(), node.position());
            });

            function buildElementStructure() {
                for (var i = 0; i < first.nodes.length; i++) {
                    var x = (2) * (180 + first.nodes[i].x);
                    var y = (2) * (90- first.nodes[i].y);
                    elements.push({
                        data: {
                            id: first.nodes[i].id,
                            position: {
                                x: first.nodes[i].x,
                                y: first.nodes[i].y
                            }
                        }
                    })
                    positionsArr.push({
                        x: first.nodes[i].x,
                        y: first.nodes[i].y
                    })
                }

                for (var i = 0; i < first.edges.length; i++) {
                    elements.push({
                        data: {
                            id: first.edges[i].id,
                            source: first.edges[i].source,
                            target: first.edges[i].target
                        }
                    })
                }
            }
        });
    </script>
</body>