@{
    ViewBag.Title = "Home Page";
}

<body>

    @{
        if (ViewData["ConfigurationException"] != null && !ViewData["ConfigurationException"].Equals(""))
        {
            <script>
                alert("An exception was thrown parsing the configuration file. Please see the /Home/Debug endpoint for a stacktrace.")
            </script>
        }

        List<Capstone.Models.ConfigurationHelper.CytoscapeConfig> AStarConfigs = (List<Capstone.Models.ConfigurationHelper.CytoscapeConfig>)ViewData["Configs"];
    }

    <div id="cy"></div>
    <script>
        $(function () { // on dom ready

            // Parse simulation configs
            var configs = @Html.Raw(Json.Encode(AStarConfigs));
            var possibleCytoscapeMaps = [];
            for (var i = 0; i < configs.length; i++) {
                possibleCytoscapeMaps.push({
                    map: null,
                    current: false
                });
            }
            var currentConfig = configs[0];
            var currentAnimation = {
                timestep: 0,
                frames: [],
                paused: false,
                finished: false
            };
            var simulationResults = [];

            // Set page description
            $('#simulation-title').text("A* Search");
            $('#simulation-description').text("An intelligent path finding algorithm.");
            $('#simulation-header').show();

            // Cytoscape initialization
            var cy = setCytoscape(currentConfig);
            setConfigurationsInSelector(configs, possibleCytoscapeMaps);
            possibleCytoscapeMaps[0]['current'] = true;
            possibleCytoscapeMaps[0]['map'] = cy;

            // Master simulation object, useful since the JS functions are separated from the views
            var simulationInfo = {
                results: null,
                cy: null,
                animation: null
            }

            // Run a simulation
            $('#simulate').click(function () {
                runSimulation()
            });

            // Start playing the animation beginning from the current frame
            $('#play').click(function () {
                if ($('#play').hasClass('disabled')) {
                    return;
                }
                currentAnimation['paused'] = false;
                updateSimulationInfo()
                $('#play').addClass('disabled');
                $('#forward').addClass('disabled');
                $('#backward').addClass('disabled');
                $('#pause').removeClass('disabled');

                if (currentAnimation['timestep'] == 0) {
                    playFromBeginning(simulationInfo);
                } else {
                    resetFrame(currentAnimation['frames'][currentAnimation['timestep']], restartAnim, simulationInfo)
                }
            });

            // Pauses the animation at the current frame
            $('#pause').click(function () {
                if ($('#pause').hasClass('disabled')) {
                    return;
                }
                currentAnimation['timestep'] = currentAnimation['timestep'];
                updateSimulationInfo()
                pauseFrame(currentAnimation['frames'][currentAnimation['timestep']]);
                currentAnimation['paused'] = true;
                updateSimulationInfo()
                $('#play').removeClass('disabled');
                $('#forward').removeClass('disabled');
                $('#backward').removeClass('disabled');
                $('#pause').addClass('disabled');
            });

            // Move forward a frame
            $('#forward').click(function () {
                updateSimulationInfo()
                frameForward(simulationInfo);
            });

            // Move backward a frame
            $('#backward').click(function () {
                updateSimulationInfo()
                frameBackward(simulationInfo);
            });

            function runSimulation() {
                //TODO: Collect simulation parameters
                $.ajax({
                    method: "GET",
                    url: "/Simulations/AStar",
                    success: (result) => {
                        console.log("Simulation has completed successfully.");
                        simulationResults = $.parseJSON(result);
                        cy = getCurrentMapObject(possibleCytoscapeMaps);
                        assembleFullAnimation(simulationResults, cy, currentAnimation, currentAnimation['timestep']);
                        $('#play').removeClass('disabled');
                        $('#forward').removeClass('disabled');
                        $('#backward').removeClass('disabled');
                        updateSimulationInfo()
                    },
                    error: (result) => {
                        console.log("Simulation has completed unsuccessfully.");
                        console.log(result);
                    }
                });
            }

            // Helper to keep the master simulation object up to date
            function updateSimulationInfo() {
                simulationInfo['results'] = simulationResults;
                simulationInfo['cy'] = cy;
                simulationInfo['animation'] = currentAnimation;
            }
        });
    </script>
</body>