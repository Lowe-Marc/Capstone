@{
    ViewBag.Title = "Home Page";
}

<body>

    @{
        if (ViewData["ConfigurationException"] != null && !ViewData["ConfigurationException"].Equals(""))
        {
            <script>
                alert("An exception was thrown parsing the configuration file. Please see the /Home/Debug endpoint for a stacktrace.")
            </script>
        }

        List<Capstone.Models.ConfigurationHelper.CytoscapeConfig> AStarConfigs = (List<Capstone.Models.ConfigurationHelper.CytoscapeConfig>)ViewData["Configs"];
    }

    <div id="cy"></div>
    <script>
        $(function () { // on dom ready

            // Parse simulation configs
            var configs = @Html.Raw(Json.Encode(AStarConfigs));
            console.log("configs", configs)
            var possibleCytoscapeMaps = [];
            for (var i = 0; i < configs.length; i++) {
                possibleCytoscapeMaps.push({
                    map: null,
                    current: false
                });
            }
            var currentConfig = configs[0];
            var currentAnimation = {
                timestep: 0,
                frames: [],
                paused: false,
                finished: false
            };
            var simulationResults = [];

            // Set page description
            $('#simulation-title').text("A* Search");
            $('#simulation-description').text("An intelligent path finding algorithm.");
            $('#simulation-header').show();
            $('#simulation-config').show();
            $('#simulation-config').height($('#simulation-display').height() - simulationConfigBottomBorder());
            setAStarConfig();
            

            // Cytoscape initialization
            var cy = setCytoscape(currentConfig);
            setConfigurationsInSelector(configs, possibleCytoscapeMaps);
            possibleCytoscapeMaps[0]['current'] = true;
            possibleCytoscapeMaps[0]['map'] = cy;

            // Master simulation object, useful since the JS functions are separated from the views
            var simulationInfo = {
                results: null,
                cy: null,
                animation: null
            }

            $('#fullscreen-enter').click(function () {
                toggleFullscreen();
            });

            $('#fullscreen-exit').click(function () {
                closeFullscreen();
            });

            // Run a simulation
            $('#simulate').click(function () {
                //setAStarConfig();
                //configurationOverlayOn();
                runSimulation();
            });

            // Start playing the animation beginning from the current frame
            $('#play').click(function () {
                if (!canPlay()) {
                    return;
                }
                currentAnimation['paused'] = false;
                updateSimulationInfo();
                disablePlay();
                enablePause();
                console.log("currentAnimation")
                console.log(currentAnimation)
                console.log("getDisplayedFrame")
                console.log(getDisplayedFrame())
                if (getDisplayedFrame() == 0) {
                    playFromBeginning(simulationInfo);
                } else {
                    resetFrame(currentAnimation['frames'][currentAnimation['timestep']], restartAnim, simulationInfo);
                }
            });

            // Pauses the animation at the current frame
            $('#pause').click(function () {
                if ($('#pause').hasClass('disabled')) {
                    return;
                }
                console.log("PAUSE - currentAnimation")
                console.log(currentAnimation)
                updateSimulationInfo();
                pauseFrame(currentAnimation['frames'][currentAnimation['timestep']]);
                currentAnimation['paused'] = true;
                updateSimulationInfo();
                enablePlay();
                disablePause();
            });

            // Move forward a frame
            $('#forward').click(function () {
                if (canPlay()) {
                    updateSimulationInfo();
                    frameForward(simulationInfo);   
                }
            });

            // Move backward a frame
            $('#backward').click(function () {
                if (canPlay()) {
                    updateSimulationInfo()
                    frameBackward(simulationInfo);
                }
            });

            function runSimulation() {
                cy = getCurrentMapObject(possibleCytoscapeMaps);
                var params = collectAStarParams(cy);
                console.log("params")
                console.log(params);
                console.log("JSON.stringify")
                console.log(JSON.stringify(params));
                $.ajax({
                    method: "POST",
                    url: "/Simulations/AStar",
                    data: { "data": JSON.stringify(params) },
                    dataType: "json",
                    success: (result) => {
                        console.log("Simulation has completed successfully.");
                        simulationResults = result
                        console.log("simulationResults", simulationResults);
                        setDisplayedFrame(simulationResults['frames'].length);
                        cy = getCurrentMapObject(possibleCytoscapeMaps);
                        assembleFullAnimation(simulationResults, cy, currentAnimation, currentAnimation['timestep']);
                        enablePlay();
                        updateSimulationInfo()
                    },
                    error: (result) => {
                        console.log("Simulation has completed unsuccessfully.");
                        console.log(result);
                    }
                });
            }

            // Helper to keep the master simulation object up to date
            function updateSimulationInfo() {
                simulationInfo['results'] = simulationResults;
                simulationInfo['cy'] = cy;
                if (getDisplayedFrame() > 0) {
                    currentAnimation['timestep'] = getDisplayedFrame() - 1;
                }
                simulationInfo['animation'] = currentAnimation;
            }

        });
    </script>
</body>